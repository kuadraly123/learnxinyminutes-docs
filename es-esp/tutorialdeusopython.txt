categoria: herramienta
herramienta: gitbash
contribuidor:
    - ["Jalil Alvarez ", "https://github.com/kuadraly123"]

Este es un tutorial sobre como hacer algunas tareas tipicas de programacion. Esta es un destinado para las personas basicamente familiares con python y experiencia en la programacion estadistica en un idioma como R, Stata, SAS, SPSS, or MATLAB. 

Vamos a configurar con IPython and pip instalando lo siguiente: numpy, scipy, pandas,matplotlib, seaborn, peticiones.
Asegúrese de hacer este tutorial en el cuaderno IPython para que los gráficos en línea y la búsqueda de documentación se hagan fácil.

# 1. Datos De Adquisicion
==========================
Una razón por la que la gente elige Python sobre R es que tienen la intención de interactuar mucho
con la web, ya sea raspando páginas directamente o solicitando datos a través de una API. Usted puede hacer esas cosas en R, pero en el contexto de un proyecto ya está usando Python, hay un beneficio a pegarse con un solo idioma.

Solicitudes de importación # para solicitudes HTTP (raspado web, API)
Importar

Raspado web
R = requests.get ("https://github.com/adambard/learnxinyminutes-docs")
R.status_code # si 200, la solicitud fue satisfactoria
R.text # raw página fuente
Print (r.text) # prettily formateado
# Guardar el origen de la página en un archivo:
Os.getcwd () # comprobar cuál es el directorio de trabajo
F = open ("learnxinyminutes.html", "wb")
F.write (r.text.encode ("UTF-8"))
F.close ()

# Descargar un csv
Fp = "https://raw.githubusercontent.com/adambard/learnxinyminutes-docs/master/"
Fn = "pets.csv"
R = requests.get (fp + fn)
Imprimir (r.texto)
F = abierto (fn, "wb")
F.write (r.text.encode ("UTF-8"))
F.close ()

"Para obtener más información sobre el módulo de solicitudes, incluidas las API,consulte 
Http://docs.python-requests.org/en/latest/user/quickstart/Unesdoc.unesco.org unesdoc.unesco.org

# 2. Lectura de un archivo CSV ====

"El paquete pandas de Wes McKinney le da objetos 'DataFrame' en Python.
    Usted ha utilizado R, usted estará familiarizado con la idea de la "data.frame" ya.
Unesdoc.unesco.org unesdoc.unesco.org
Importar pandas como pd
Importar numpy como np
Import scipy as sp
Pets = pd.read_csv (fn)
mascotas
# Nombre edad peso especie
# 0 mullido 3 14 gato
# 1 vesuvius 6 23 peces
# 2 rex 5 34 perro

Usuarios de R: note que Python, como la mayoría de los lenguajes de programación normales, comienza
    Indexación desde 0. R es la inusual para partir de 1.
Unesdoc.unesco.org unesdoc.unesco.org

# Dos maneras diferentes de imprimir una columna
Mascotas
Mascotas ["edad"]

Pets.head (2) # imprime primero 2 filas
Pets.tail (1) # imprime la última fila

Pets.name [1] # 'vesuvius'
Pets.species [0] # 'cat'
Animales domésticos ["peso"] [2] # 34

# En R, usted esperaría conseguir 3 filas que hacen esto, pero aquí usted consigue 2:
Pets.age [0: 2]
# 0 3
# dieciséis

Suma (pets.age) * 2 # 28
Max (mascota.pesado) - min (mascota.pesado) # 20

Si usted está haciendo algún álgebra lineal serio y crujido numérico, usted puede Sólo quiere arrays, no DataFrames. Los DataFrames son ideales para combinar columnas de diferentes tipos.Unesdoc.unesco.org unesdoc.unesco.org

# 3. Gráficos ====

Import matplotlib como mpl
Import matplotlib.pyplot as plt
% Matplotlib inline

# Para hacer la vizualización de datos en Python, use matplotlib

Plt.hist (pets.age);

Plt.boxplot (pets.weight);

Plt.scatter (pets.age, pets.weight)
Plt.xlabel ("edad")
Plt.label ("peso");

# Seaborn se sienta encima de matplotlib y hace parcelas más bonitas

Importar seaborn como sns

Plt.scatter (pets.age, pets.weight)
Plt.xlabel ("edad")
Plt.label ("peso");

# También hay algunas funciones de trazado específico de seaborn
# Notar cómo seaborn etiqueta automáticamente el eje x en este barplot
Sns.barplot (mascotas ["edad"])

# R veteranos todavía pueden usar ggplot
Desde la importación de ggplot *
Ggplot (aes (x = "edad", y = "peso"), datos = mascotas) + geom_point () + labs (title = "pets")
# Fuente: https://pypi.python.org/pypi/ggplot

# Hay incluso un puerto d3.js: https://github.com/mikedewar/d3py

# 4. Simple limpieza de datos y análisis exploratorio ====

"" "Aquí hay un ejemplo más complicado que demuestra una base de datos
    El flujo de trabajo de limpieza que conduce a la creación de algunas parcelas exploratorias
    Y el funcionamiento de una regresión lineal.
        El conjunto de datos fue transcripto de Wikipedia a mano. Contiene
    Todos los emperadores romanos santo y los hitos importantes en sus vidas
    (Nacimiento, muerte, coronación, etc.).
        El objetivo del análisis será explorar si una relación
    Existe entre el año del nacimiento del emperador y la esperanza de vida del emperador.
    Fuente de datos: https://en.wikipedia.org/wiki/Holy_Roman_Emperor
Un

# Cargar algunos datos sobre los emperadores romanos santo
Url = "https://raw.githubusercontent.com/e99n09/R-notes/master/data/hre.csv"
R = requests.get (url)
Fp = "hre.csv"
Con abierto (fp, "wb") como f:
    F.write (r.text.encode ("UTF-8"))

Hre = pd.read_csv (fp)

Hre.head ()
Un
   Ix Dynasty Nombre Nacimiento Elección de la muerte 1
0 NaN Carolingian Charles I 2 de abril 742 28 de enero 814 NaN
1 NaN Carolingian Louis I 778 20 de junio 840 NaN
2 NaN Carolingian Lothair I 795 29 de septiembre 855 NaN
3 NaN Carolingian Louis II 825 12 de agosto 875 NaN
4 NaN Carolingian Charles II 13 junio 823 6 octubre 877 NaN

